{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","src","alt","width","height","class","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","role","placeholder","onClick","toogleMode","TextForm","Text","setText","useState","Fragment","style","color","mode1","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","handleUpClick","newText","toUpperCase","showAlert","handleLoClick","toLowerCase","handleClearText","speak","msg","SpeechSynthesisUtterance","window","speechSynthesis","toogle","document","getElementById","textContent","innerHTML","cancel","handleCopy","select","navigator","clipboard","writeText","getSelection","removeAllRanges","handleExtraSpaces","split","join","handleExtraLines","handleGmail","filter","element","About","myStyle","data-bs-parent","Alert","alert","word","lower","charAt","slice","captilize","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.7cdd3464.chunk.js","sourcesContent":["import React from \"react\";\r\nimport propTypes from \"prop-types\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    \r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">\r\n      <img src=\"favicon-32x32.png\" alt=\"Logo\" width=\"30\" height=\"24\" class=\"d-inline-block align-text-top\" />\r\n    {props.title}\r\n    </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"#scrollspyHeading1\">\r\n                {props.aboutText}\r\n              </a>\r\n            </li>\r\n          </ul>\r\n          <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form>\r\n          <div className={`form-check form-switch text-${props.mode === \"info\"?\"dark\":\"white\"}`}>\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              onClick={props.toogleMode}\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label className={`\"form-check-label\" text-${\"primary\"}htmlFor=\"flexSwitchCheckDefault\"`} >\r\n              Enable {props.mode === \"info\"?\"Dark\":\"Light\"}Mode\r\n            </label>\r\n          </div>      \r\n{/* \r\n          <div className=\"btn-group\" role=\"group\" >\r\n    <button type=\"button\" className=\"btn btn-primary dropdown-toggle\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n      SetMode\r\n    </button>\r\n    <ul className={`\"dropdown-menu\" bg-${props.mode}`}>\r\n      <li><div className={`form-check form-switch text-${props.mode === \"light\"?\"dark\":\"light\"}`}>\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              onClick={props.toogleMode}    \r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >\r\n              Enable {props.mode === \"light\"?\"Dark\":\"Light\"}Mode\r\n            </label>\r\n          </div>\r\n        </li>\r\n      <li><div className={`form-check form-switch text-${props.mode1 === \"light\"?\"grey\":\"light\"}`}>\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              onClick={props.toogleMode1}\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >\r\n              Enable {props.mode1 === \"light\"?\"grey\":\"Light\"}Mode\r\n            </label>\r\n          </div></li>\r\n    </ul>\r\n  </div>*/}\r\n        </div> \r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: propTypes.string.isRequired,\r\n  aboutText: propTypes.string.isRequired,\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) { \r\n  const handleUpClick = () => {\r\n    let newText = Text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to uppercase\",\"success\")\r\n  };\r\n  const handleLoClick = () => {\r\n    let newText = Text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to lowercase\",\"success\")\r\n  };\r\n  const handleClearText = () => {\r\n    let newText = '';\r\n    setText(newText);\r\n    props.showAlert(\"Text has been Cleared\",\"success\")\r\n  };\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n  const speak = () => {\r\n    let msg = new SpeechSynthesisUtterance(Text);\r\n    window.speechSynthesis.speak(msg);\r\n    const toogle = document.getElementById('toggle')\r\n    if (toogle.textContent === \"Speak\") {\r\n        toogle.innerHTML = \"Stop\"\r\n    }\r\n    else {\r\n        toogle.innerHTML = \"Speak\"\r\n        if (toogle.innerHTML === \"Speak\"){\r\n            window.speechSynthesis.cancel()\r\n        }\r\n    }\r\n}\r\n  const handleCopy =()=>{\r\n    var Text=document.getElementById(\"myBox\");\r\n    Text.select();\r\n    navigator.clipboard.writeText(Text.value);\r\n   document.getSelection().removeAllRanges();\r\n    props.showAlert(\"Copied to clipboard\",\"success\")\r\n  }\r\n\r\n  const handleExtraSpaces =()=>{\r\n      let newText=Text.split(/[ ]+/);\r\n      setText(newText.join(\" \"));\r\n      props.showAlert(\"Removed Extraspaces \",\"success\")\r\n  }\r\n  const handleExtraLines =()=>{\r\n    let newText=Text.split(/\\s+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Removed Extraspaces \",\"success\")\r\n}\r\n  const handleGmail =()=>{\r\n    let newText=\"www.\"+Text+\".com\";\r\n    setText(newText);\r\n    props.showAlert(\"Gmail form of the text created \",\"success\")\r\n  }\r\n  const [Text, setText] = useState(\"\");\r\n  return (\r\n    <>\r\n      <div className=\"container\"  style={{color: props.mode === \"dark\"?\"white\":props.mode1=== \"grey\"?\"white\":\"#042743\"}}\r\n      >\r\n        <h1 className=\"fst-italic mb-4\">{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={Text}\r\n            onChange={handleOnChange}\r\n            style={{backgroundColor: props.mode === 'dark' ? 'rgb(36 74 104)' :props.mode1 === \"grey\"?\"green\":'white',color: props.mode === \"dark\"?\"white\":props.mode1=== \"grey\"?\"white\":\"#042743\"}}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button disabled={Text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={handleUpClick}>\r\n          Convert to uppercase\r\n        </button>\r\n        <button disabled={Text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={handleLoClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button disabled={Text.length===0}className=\"btn btn-primary mx-2 my-1\" onClick={handleClearText}>\r\n          Clear text\r\n        </button>\r\n        <button disabled={Text.length===0} type=\"submit\" onClick={speak} className=\"btn btn-warning mx-2 my-2\" id=\"toggle\">Speak</button>\r\n        \r\n        <button disabled={Text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={handleCopy}>\r\n          Copy text\r\n        </button>\r\n        <button disabled={Text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={handleExtraSpaces}>\r\n          Remove ExtraSpaces\r\n        </button>\r\n        <button disabled={Text.length===0} className=\"btn btn-primary mx-2 my-1\" onClick={handleExtraLines}>\r\n          Remove Lines\r\n        </button>\r\n        <button disabled={Text.length===0}  className=\"btn btn-primary mx-2 my-1\" onClick={handleGmail}>\r\n          Gmail form\r\n        </button>\r\n      </div>\r\n      <div className=\"container my-3\" style={{color: props.mode === \"dark\"?\"white\":props.mode1=== \"grey\"?\"white\":\"#042743\"}}>\r\n        <h2>Your Text Summary</h2>\r\n        <p>\r\n          {Text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} words and {Text.length} charaters{\" \"}\r\n        </p>\r\n        <p>{0.008 * Text.split(\" \").filter((element)=>{return element.length!==0}).length+\"  minutes\"}</p>\r\n        <h2>Preview</h2>\r\n        <p>{Text.length>0?Text:\"Nothing to preview\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function About(props) {\r\n  // const [myStyle, setMyStyle] = useState({\r\n  //   color: \"black\",\r\n  //   backgroundColor: \"white\",\r\n  // });\r\n  // const [btnText, setBtnText] = useState(\"Enable Dark Mode\");\r\n  // const toggleStyle = () => {\r\n  //   if (myStyle.color === \"black\") {\r\n  //     setMyStyle({\r\n  //       color: \"white\",\r\n  //       backgroundColor: \"#042743\",\r\n  //       border: \"1px solid white\",\r\n  //     });\r\n  //     setBtnText(\"Enable Light Mode\");\r\n  //   } else {\r\n  //     setMyStyle({\r\n  //       color: \"black\",\r\n  //       backgroundColor: \"white\",\r\n  //     });\r\n  //     setBtnText(\"Enable Dark Mode\");\r\n  //   }\r\n\r\n\r\n  let myStyle = {\r\n    color: props.mode ==='dark'?'white':'#042743',\r\n    backgroundColor: props.mode ==='dark'?'rgb(36 74 104)':'white', \r\n}\r\n  \r\n  return (\r\n    <>\r\n\r\n    <div className=\"container\" >\r\n    <h1 className=\"my-3\" style={{color: props.mode ==='dark'?'white':'#042743'}} id=\"scrollspyHeading1\" >About Us</h1>\r\n      <div className=\"accordion\" id=\"accordionExample\">\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button\"style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseOne\"\r\n              aria-expanded=\"true\"\r\n              aria-controls=\"collapseOne\"\r\n            >\r\n               <strong>Analyze Your text </strong>\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseOne\"style={myStyle}\r\n            className=\"accordion-collapse collapse show\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n            Textutils gives you a way to analyze your text quickly and efficiently. Be it word count, character count or amount of required to read it.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\" style={myStyle}>\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button collapsed\"style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseTwo\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseTwo\"\r\n            >\r\n              <strong>Free to use </strong>\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseTwo\" style={myStyle}\r\n            className=\"accordion-collapse collapse\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n            TextUtils is a free character counter tool that provides instant character count & word count statistics for a given text. TextUtils reports the number of words and characters. Thus it is suitable for writing text with word/ character limit.\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"accordion-item\">\r\n          <h2 className=\"accordion-header\">\r\n            <button\r\n              className=\"accordion-button collapsed\" style={myStyle}\r\n              type=\"button\"\r\n              data-bs-toggle=\"collapse\"\r\n              data-bs-target=\"#collapseThree\"\r\n              aria-expanded=\"false\"\r\n              aria-controls=\"collapseThree\"\r\n            >\r\n             <strong>Browser Compatible </strong>\r\n            </button>\r\n          </h2>\r\n          <div\r\n            id=\"collapseThree\"style={myStyle}\r\n            className=\"accordion-collapse collapse\"\r\n            data-bs-parent=\"#accordionExample\"\r\n          >\r\n            <div className=\"accordion-body\" style={myStyle}>\r\n            This word counter software works in any web browsers such as Chrome, Firefox, Internet Explorer, Safari, Opera. It suits to count characters in facebook, blog, books, excel document, pdf document, essays, etc.\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <div className=\"container my-3\">\r\n        <button onClick={toggleStyle} type=\"button\" className=\"btn btn-primary\">\r\n          {btnText}\r\n        </button>\r\n      </div> */}\r\n   </div>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n  const captilize=(word)=>{\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  return (\r\n    <div style={{height:'50px'}}>\r\n    {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{captilize(props.alert.type)}</strong>:{props.alert.msg}\r\n</div>}\r\n</div>\r\n  )\r\n}\r\n\r\nexport default Alert","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport React, { useState } from 'react';\n\n\nfunction App() {\n  const[mode,setMode]=useState('info');\n  // const[mode1,setMode1]=useState('light');\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert =(message,type)=>{\n    setAlert({\n      msg:message,\n      type:type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    },1500)\n  }\n  const toogleMode=()=>{\n     if(mode === 'info'){\n      setMode('dark')\n      document.body.style.backgroundColor=\"#042743\";\n      showAlert(\"DarkMode has been enabled\",\"success\")\n     }\n     else{\n      setMode('info')\n      document.body.style.backgroundColor=\"white\"\n      showAlert(\"LightMode has been enabled\",\"success\")\n     }\n  }\n//   const toogleMode1=()=>{\n//     if(mode1 === 'light'){\n//      setMode1('grey')\n//      document.body.style.backgroundColor=\"green\";\n//      showAlert(\"DarkMode has been enabled\",\"success\");\n//     }\n//     else{\n//       setMode1('light')\n//       document.body.style.backgroundColor=\"white\"\n//       showAlert(\"LightMode has been enabled\",\"success\")\n//      }\n//  }\n    return (\n    <>\n    \n<Navbar title=\"TextUtils\" aboutText=\"about\" mode={mode} toogleMode={toogleMode}  />\n<Alert alert={alert} />\n<div className=\"container\">\n\n<TextForm heading=\"Try TextUtils - word counter, character counter, remove extra spaces\" showAlert={showAlert } mode={mode}/>\n  <About id=\"scrollspyHeading1\" mode={mode}/>\n</div>\n\n</>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}